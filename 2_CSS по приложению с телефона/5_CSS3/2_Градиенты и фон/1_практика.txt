_______________________________________________________________________________________
Создание Линейного Градиента

Градиенты в CSS3 позволяют отображать плавные переходы между двумя и более цветами. В CSS3 определены два типа градиентов: Linear(Линейный) и Radial(Радиальный). 

Чтобы создать линейный градиент, вам необходимо определить по меньшей мере две цветные остановки. Цветные остановки это цвета, между которыми вы хотите воспроизвести плавные переходы. Вы также можете установить точку старта и направление - или угол - вместе с эффектом градиента.
В примере ниже, синий и черный цвета используются для создания линейного градиента сверху вниз. 

div {
   float: left;
   width: 300px; 
   height: 100px;
   margin: 4px;
   color: #FFF;  
   background:-moz-linear-gradient(DeepSkyBlue, Black);
}

Этот синтаксис работает в Mozilla (-moz). Если вы работаете с другим браузером, добавьте соответствующий префикс, чтобы браузер понимал градиент.

Вы можете использовать названия цветов, шестнадцатеричные значения, RGB, или HSL чтобы определить градиент цвета.

linear-gradient(DeepSkyBlue, Black); - сверху будет синйи цвет который переливается вниз
в чёрный
_______________________________________________________________________________________
Остановки Цвета

Цвета могут быть добавлены один за другим, с помощью разделения запятыми. Затем браузер определит каждую позицию остановки цвета.
В примере ниже, линейный градиент имеет несколько остановок цвета и выполняется сверху вниз. 

background:-moz-linear-gradient(blue, yellow, green, pink, white);

Остановки цвета могут быть определены для каждого цвета. 

background:-moz-linear-gradient(blue 20%, yellow 30%, green 85%);

В дополнение к процентам, вы также можете использовать px, em, для определения остановок цвета.
Если вы используете одну остановку для двух цветов, то между ними будет создана острая линия.
_______________________________________________________________________________________
Направление Градиента

Направление градиента может быть изменено.
В примере ниже, первый градиент начинается слева, двигаясь вправо; второй двигается снизу  вверх.

div.first {
   float: left;
   width: 300px; 
   height: 100px;
   margin: 4px;
   color: #FFF;  
   background:-moz-linear-gradient(left, blue, green, white);
} 
div.second { 
   float: left;
   width: 300px; 
   height: 100px;
   margin: 4px;
   background:-moz-linear-gradient(bottom, blue, green, white);
}

left(влево), right(вправо), top(вверх), и bottom(вниз) являются допустимыми значениями для направления градиента. Вы также можете использовать различные комбинации с ними для определения желаемого направления (например, bottom right)
_______________________________________________________________________________________
Угол Градиента

В качестве альтернативы предопределенным направлениям (вниз, вверх, вправо, влево, вниз и вправо, и т.д.), вы можете управлять направлением градиентов определив угол.

Определяемый угол лежит между горизонтальной линией и линией градиента. Другими словами, угол 0deg создает градиент слева-направо, а 90deg генерирует градиент снизу-вверх. 

div.first {
   float: left;
   width: 300px; 
   height: 100px;
   margin: 4px;
   color: #FFF;
   background:-moz-linear-gradient(bottom left, blue, green, white);
}
div.second {
   float: left;
   width: 300px; 
   height: 100px;
   margin: 4px;
   background:-moz-linear-gradient(100deg, blue, green, white);
}
_______________________________________________________________________________________
Повторение Линейного Градиента

Функция repeating-linear-gradient() используется для повторения линейного градиента: 

background:-moz-repeating-linear-gradient(blue, green 20px);
_______________________________________________________________________________________
Радиальные Градиенты

Для создания радиального градиента вам необходимо по меньшей мере определить две остановки цвета. 
Радиальный градиент определяется с помощью его центра.

Синтаксис CSS для радиального градиента выглядит следующим образом:

background: radial-gradient(position, shape or size, color-stops);

Первое значение определяет позицию градиента. Мы можем использовать описательные ключевые слова, такие как top, bottom, center, или left; или мы можем определить, например, 50% 50% чтобы установить градиент в центре, или 0% 0% чтобы установить градиент вверху слева.

Второе значение определяет форму и размер градиента. Есть два аргумента для придания формы градиенту: Первый это эллипс, который установлен по умолчанию; второй это окружность.

Наконец, третье значение определяет комбинацию цвета.
_______________________________________________________________________________________
Установка Форм

Параметр shape определяет форму. Если вы не определите форму для радиального градиента, то он примет эллипс значением по умолчанию.

В примере ниже, мы не определили форму градиента первого div, но для второго, мы установили значение на окружность.
Вот что получилось:

CSS:

div.first {
   height: 150px;
   width: 200px;
   color: #FFF;
   background: -moz-radial-gradient(green, yellow, blue);   
}
div.second {
   height: 150px;
   width: 200px;
   color: #FFF;
   background: -moz-radial-gradient(circle, green, yellow, blue); 
}
_______________________________________________________________________________________
Положение Радиального Градиента

По существу, мы можем использовать тот же метод, который мы использовали для определения положения фонового изображения со свойством background-position, для определения положения центра эллипса. Мы можем определить горизонтальную позицию для фона, и опционально - вертикальную позицию, используя ключевые слова (left, center right, или top, center, bottom), значения длины, значения процентов, или некоторые их комбинации. 

В примере ниже, первый градиент начинается с левого верхнего угла; во втором, мы установили 5% зеленому, 15 % желтому и 60% голубому цветам. 

div.first {
   height: 150px;
   width: 200px;
   color: #FFF;
   background: -moz-radial-gradient(top left, green, yellow, blue);   
}
div.second {
   height: 150px;
   width: 200px;
   color: #FFF;
   background: -moz-radial-gradient(green 5%, yellow 15%, blue 60%); 
}

В дополнение к процентам вы можете использовать пиксели или ems.
_______________________________________________________________________________________
Установка Остановок Цвета

Также, как и с линейными градиентами, остановка цвета определяется цветом, сложенным с опциональной позицией остановки, которая является значением длины или процентным значением.

Простой градиент окружности с остановками цвета:

background: -moz-radial-gradient(circle, green 40%, yellow 50%, blue 70%); 
_______________________________________________________________________________________
Свойство background-size

Свойство background-size добавляет новую функциональность для CSS, которая позволяет нам указать размер фоновых изображений, используя либо длину, либо проценты. 

Например: 

div {
   height: 150px;
   width: 200px;
   border: 1px solid #000;
   background: url("css_logo.png") no-repeat 50% 50%;
   background-size: 100px 100px;
}

Текущие версии большинства популярных браузеров - включая Firefox, Safari, Chrome, Internet Explorer, и Opera - теперь поддерживают свойство background-size, без необходимости использования вендорных префиксов.
_______________________________________________________________________________________
Значения Свойства background-size

Двумя другими возможными значениями для размера фона являются ключевые слова contain и cover. 

Ключевое слово contain масштабирует изображение, чтобы оно соответствовало контейнеру. 
Другими словами, изображение будет расти, или уменьшаться пропорционально, но ширина и высота не будут превышать размеров контейнера:

CSS синтаксис выглядит следующим образом: 

background-size: contain;
_______________________________________________________________________________________
Свойство background-size также поддерживает ключевое слово cover. Изображение масштабируется, чтобы заполнить весь контейнер; однако, если установлено иное соотнощение сторон, то изображение будет обрезано:

CSS синтаксис выглядит следующим образом: 

background-size: cover;
_______________________________________________________________________________________
Свойство background-clip

Свойство background-clip определяет область изображения фона.

Свойство принимает три различных значения:

border-box - (по умолчанию) фон выводится под границами
padding-box - фон отображается внутри границ
content-box - фон отображается только внутри контента

В примере ниже, первый элемент div со свойством background-clip установлено значение padding-box; во втором элементе div установлено значение content-box.

#first {
   border: 2px dotted black;
   padding: 20px;
   background: LightBlue;
   background-clip: padding-box;
}
#second {
   border: 2px dotted black;
   padding: 20px;
   background: LightBlue;
   background-clip: content-box;
}
_______________________________________________________________________________________
Свойство background-clip с Изображениями

background-clip также применяется к фоновым изображениям.
CSS: 

div {
   background-image: url("css-logo.png");
   background-clip: content-box;
}
_______________________________________________________________________________________
Прозрачные Рамки со свойством background-clip

Установка прозрачной рамки элемента создаст свой собственный фон элемента под рамкой. 
В нижеуказанном примере мы сделали рамки прозрачными, используя RGBA, но в действительности они стали чисто серыми. 

CSS:

border: 20px solid rgba(0, 0, 0, 0.3);
_______________________________________________________________________________________
Установив значение свойства background-clip на padding-box, рамки станут прозрачными.

CSS: 

border: 20px solid rgba(0, 0, 0, 0.3);
-moz-background-clip: padding-box;    
background-clip: padding-box; 

Эффект прозрачности достигается с background-clip:padding-box. Без него, фон блока проходит под рамками, что делает его непрозрачным.
_______________________________________________________________________________________
Множество Фоновых Изображений

Способность иметь несколько фоновых изображений является новой особенностью CSS3.
Множество фоновых изображений определяется с помощью разделенного запятыми списка значений для свойства background-image. Первое изображение появится вверху, последнее внизу. 

В примере ниже, у нас есть два фоновых изображения: первое это CSS лого (выравненное по нижнему и правому краям); второе это изображение с кодом (выравненное к левому верхнему углу). 

CSS: 

div {
  width: 400px;
  height: 300px;
  background-image: url(csslogo.png), url(csscode.jpg);
  background-position: right bottom, left top;
  background-repeat: no-repeat;
} 
_______________________________________________________________________________________
Множество Фоновых Изображений

Положение фоновых изображений может быть изменено с помощью свойства background-position. 
Например: 

div {
   width: 400px;
   height: 300px;
   background-image: url(csslogo.png), url(csscode.jpg);
   background-position: right top, left top;
   background-repeat: no-repeat;
} 

Множество фоновых изображений может быть определено с помощью свойства background:

background: url(csslogo.png) right top no-repeat, 
url(csscode.jpg) left top no-repeat; 

_______________________________________________________________________________________
Свойство opacity

CSS свойство opacity добавляет прозрачность к любому элементу.
В примере ниже, мы установили различные уровни прозрачности одному и тому же изображению, так что вы можете увидеть разницу. 

#img1 {
   opacity: 1;
}
#img2 {
   opacity: 0.5;
}
#img3 {
   opacity: 0.25;
}

Значением свойства opacity должно быть число между 0.0 (полностью прозрачный) и 1.0 (полностью непрозрачный).

_______________________________________________________________________________________
Свойство Opacity в браузере Internet Explorer

Чтобы свойство opacity работало во всех версиях браузера IE, используйте filter:alpha(opacity=x) вместе со свойством opacity. x может принимать значения от 0 до 100.
Значение 0 приводит к результату полностью прозрачного элемента (например, 100% прозрачности), а значение 100 делает элемент полностью непрозрачным (т.е., 0% прозрачности).

Например, чтобы код работал с браузером IE, если значение свойства opacity изображения установлено на 0.5, то код должен выглядеть следующим образом: 

#img {
  opacity: 0.5;
  filter: alpha(opacity=50);
}

Свойство alpha filter является свойством только Microsoft, не стандартным CSS свойством.
_______________________________________________________________________________________
