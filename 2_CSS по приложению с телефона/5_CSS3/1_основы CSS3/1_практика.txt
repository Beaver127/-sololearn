_______________________________________________________________________________________
CSS3 ВВЕДЕНИЕ

CSS3 это свежая версия стандарта CSS.
CSS3 полностью обратно совместим с более ранними версиями CSS.

Наиболее важными новыми особенностями являются:
Border radius(радиус рамки) - позволяет нам создавать закругленные углы для элементов.
Border images(рисованная рамка) - позволяет нам отображать рисованную рамку вокруг элемента.
Multiple backgrounds(множество фонов) - позволяет использовать множество фонов в элементе.
Анимации и эффекты, и многое другое! 

CSS3: Новые Особенности

Чтобы сделать веб разработку проще и быстрее, CSS3 представляет дополнительные новые особенности, включая следующие:

Box Shadow
Свойство box-shadow, вы можете добавлять одну, или несколько теней к элементу, определяя значения для цвета, размера, размытия и растяжения.

Градиенты 
Градиенты CSS3 позволяют вам установить цвет фона элемента на градиент. Доступно два типа градиентов: Linear(линейный) и Radial(радиальный).
CSS3: Новые Особенности

Трансформация(Transform) позволяет вам вращать, масштабировать, двигать, и смещать элементы. 

Другой известной особенностью являются Переходы(Transitions) которые позволяют вам создавать анимацию от одного значения свойства CSS к другому. Вы можете комбинировать их с трансформацией и анимировать позиционирование элементов, вращение и масштабирование.

Свойство, привлекающее больше всего внимания это Анимация(Animation). 
Анимация CSS имеет свои спецификации и позволяет вам создавать ключевые кадры(keyframes), устанавливать длительность, плавность, и другое._______________________________________________________________________________________
Вендорные Префиксы CSS

Вендорные префиксы CSS, или префиксы браузера CSS являются приставками используемыми производителями (вендорами) браузеров для экспериментальных, еще не принятых в стандарт, CSS-свойств. Браузерные префиксы используются для добавления новых особенностей, которые могут не стать частью финальной и официальной спецификации CSS. 

Например, префиксом для Safari и Chrome является -webkit. Свойство border-radius в настоящее время поддерживается в Chrome, Safari, и Mozilla, пока оно сопровождается префиксом браузера.
Для определения border-radius в Chrome и Safari, используется следующий синтаксис:

-webkit-border-radius: 24px;

Префикс добавляется к свойству, чтобы оно работало в неподдерживаемых браузерах. 

Firefox: -moz- 
Safari: -webkit-
Chrome: -webkit-
Opera: -o-
Internet Explorer: -ms
_______________________________________________________________________________________
Свойство border-radius

С помощью CSS3, вы можете дать любому элементу element "закругленные углы" используя свойство border-radius.

CSS:

border-radius: 20px;

Специфические значения могут быть применены для свойства border-radius в следующем порядке: верх-лево, верх-право, низ-право, низ-лево.

border-radius: 1px 2px 20px 40px;
1px - вверх-лево
2px - вверх-право 
20px - низ-право
40px - низ-лево

Значения свойства border-radius могут быть также выражены в процентах.

Создание Окружности

Прямоугольник может быть превращен в окружность с помощью CSS. 
Чтобы создать окружность, радиус рамки должен быть равен половине высоты и ширины. 

Прямоугольник в нижеуказанном примере имеет ширину и высоту равные 200px. Установив радиус рамки равным 100px, углы будут округлены для формирования окружности
_______________________________________________________________________________________
Свойство box-shadow

CSS3 свойство box-shadow применяет к элементам тень.
Компоненты свойства box-shadow декодируются браузерами в следующей манере:
-Первая длина для горизонтального смещения вызовет тень справа от блока (значение обязательно)
-Вторая длина для вертикального смещения вызовет тень под блоком (значение обязательно)
-Цвет тени (значение опционально)

box-shadow: 10px 10px #888888;

Размытие и Растяжение

До установки цвета, находятся два также опциональных значения для элемента box-shadow, которыми являются blur(размытие) и spread(растяжение). 

box-shadow: 10px 20px 5px 6px #888888;
10px - смещение тени по горизонтали в правую сторону  
20px - смещение тени по вертикали вниз
5px - размытие
6px - растяжение
#888888 - цвет тени

Отрицательные Значения

Отрицательные значения могут также использоваться со свойством box-shadow.

горизонтальное смещение - тень будет слева от блока
вертикальное смещение - тень будет над блоком
радиус размытия - отрицательное значение не допустимо
радиус растяжения - отрицательное значение вызовет сжатие тени

box-shadow: -10px -10px 5px -5px #888888;
_______________________________________________________________________________________
Создание Внутренней Тени

Ключевое слово "inset" позволяет рисовать внутреннюю тень в блоке. Чтобы отобразить внутреннюю тень, просто добавьте ключевое слово inset: 

box-shadow: inset 10px 10px 5px #888888;

Вы можете одновременно создать inner(внутреннюю) и outer(внешнюю) тени, разделяя каждую запятой.

box-shadow: inset 10px 10px 5px #888888,
10px 10px 5px #888888;
_______________________________________________________________________________________
Наслаивание Множества Теней

Вы можете определить столько теней для одного и того же блока, сколько вы хотите, записав их разделенными через запятую. 

В нижеуказанном примере, две внутренние тени созданы с помощью разделения их через запятую. 

box-shadow:
inset 10px 10px 5px #888888,
inset -10px -10px 5px #888888;

В случае, если мы указываем более одного значения, то, которое идет последним, будет размещено за другими тенями.
_______________________________________________________________________________________
Эффект Прозрачности

До CSS3, прозрачные фоновые изображения использовались для создания эффекта прозрачности. Новые свойства CSS3 теперь позволяют создать эффект прозрачности намного легче.

CSS поддерживает названия цветов, шестнадцатеричные и RGB представления цвета.
В дополнение, CSS3 представляет следующее:

RGBA Цвета
Значения цвета RGBA являются расширением значений цвета RGB с альфа-каналом, который определяет прозрачность для цвета.
Значение цвета RGBA значит следующее: rgba(red(красный), green(зеленый), blue(голубой), alpha(альфа)). Параметром альфа является число, лежащее от 0.0 (полностью прозрачный) и до 1.0 (полностью непрозрачный).

HSL (Hue(Тон), Saturation(Насыщенность), Lightness(Светлота)) Цвета
Значение цвета HSL значит следующее: hsl(hue(тон), saturation(насыщенность), lightness(светлота)).
Тон это градус на цветовом колесе, варьирующийся от 0 до 360
0 (или 360) это красный, 120 это зеленый, 240 это синий.
Насыщенность это процентное значение: 100% значит полный цвет.
Светлота также является процентным значением; 0% это темный (черный) и 100% это белый. Цветовые значения HSLA являются расширением цветовых значений HSL с альфа-каналом - который определяет прозрачность для цвета (также как и в RGBA).

В нижеуказанном примере, прозрачное стеклянное меню создано с помощью CSS3.

В HTML файле, добавлен тег <nav>, содержащий список <ul> с ссылками: 

<nav>
   <ul>
       <li><a href="#">COURSES</a></li>
       <li><a href="#">DISCUSS</a></li>
       <li><a href="#">TOP LEARNERS</a></li>
       <li><a href="#">BLOG</a></li>
   </ul>
</nav>

Множество свойств CSS3 используются для создания эффектов: 

body {
   background:url("bg.jpg");
}
nav {
   padding: 50px 0;
   min-width: 500px; 
}
nav ul {
   background: linear-gradient(90deg, 
     rgba(255, 255, 255, 0) 0%, 
     rgba(255, 255, 255, 0.2) 25%, 
     rgba(255, 255, 255, 0.2) 75%, 
     rgba(255, 255, 255, 0) 100%);
   box-shadow: 0 0 25px rgba(0, 0, 0, 0.1),
     inset 0 0 1px rgba(255, 255, 255, 0.6);
}
nav ul li {
   display: inline-block;
}
nav ul li a {
   padding: 10px; 
   color: #FFFFFF;
   font-size: 18px;
   font-family: Arial;
   text-decoration: none;
   display: block;
 }


_______________________________________________________________________________________
Свойство text-shadow

Свойство text-shadow определяет один и более эффектов тени, разделенных запятыми, которые будут применены к текстовому содержимому текущего элемента.

text-shadow: 0px 5px 3px #555;
0px - X
5px - Y
3px - Blur
#555 - Color

- Значения offset-x и offset-y обязательны для использования свойства text-shadow.
- Значение color не является обязательным, но с тех пор, как значение по умолчанию стало прозрачным, то тень не появится, пока вы не укажете значение цвета.
_______________________________________________________________________________________
Множество Теней Текста

Стиль свойства text-shadow может принимать множество значений в разделенном запятыми списке. 
В соответствии с CSS2, тени ложатся в порядке их появления, так что, если произойдет их наложение, последняя определенная тень появится сверху. CSS3 изменил это, так что теперь тени применяются в обратном порядке. 

Чтобы создать несколько теней, тени необходимо разделить запятыми. Например: 

h1 {
   text-shadow: 5px 10px 2px #93968f, 
      -3px 6px 5px #58d1e3;
}

Чтобы тень текста выглядела реалистично, запомните несколько следующих характеристик тени: 

- Тень, которая находится ближе к тексту, должна быть менее размыта, чем тень, которая находится дальше от текста. Тень, которая находится далеко от текста, обычно подразумевает собой источник света, находящийся далеко от текста. 

- Тень, которая находится близко к тексту, обычно подразумевает собой, что поверхность под текстом находится близко, также как и источник света. Ближайшая к тексту тень является более темной, чем дальняя, потому что меньше света может попасть между формой и поверхностью под текстом. 

Чтобы убрать тень текста, установите свойство text-shadow на none; тени не будут ассоциированы с этим элементом.
_______________________________________________________________________________________
Работаем с Псевдоклассами

Псевдоклассы CSS позволяют нам стилизовать элементы, или части элементов, 
которые существуют в дереве документа без использования JavaScript
 или других скриптов. Псевдоклассы начинаются с  ":" (двоеточия).
Наиболее часто используемыми псевдоклассами являются :first-child и :last-child. 

Псевдокласс :first-child находит любой элемент, являющийся первым в своем родителе. 

HTML:

<div id="parent">
   <p>First paragraph</p>
   <p>Second paragraph</p>
   <p>Third paragraph</p>
   <p>Fourth paragraph</p>
</div>

CSS:

#parent p:first-child {
   color: green;
   text-decoration: underline;   
}
_______________________________________________________________________________________
Псевдокласс :last-child находит любой элемент, являющийся последним в его родителе. 

#parent p:last-child {
   color: green;
   text-decoration: underline;   
}
_______________________________________________________________________________________
Работаем с Псевдоэлементами

Псевдоэлементы используются для выбора специфических частей элемента.
Есть пять псевдоэлементов в CSS, каждый начинается с двойного двоеточия (::):

::first-line - первая строка текста селектора
::first-letter - первая буква текста в селекторе
::selection - выбирает часть текста, которая указана пользователем
::before - вставляет некоторое содержимое до элемента
::after - вставляет некоторое содержимое после элемента


В примере ниже, псевдоэлемент ::first-line используется 
для стилизации первой строки нашего текста:

p::first-line {
   color: #589432;
}

Псевдоэлемент ::selection стилизует выбранный текст: 

p::-moz-selection {
   background: #8bc34a;
   color: #fff;
}

Используется префикс -moz- , так как элемент ::selection еще 
не поддерживается браузером Mozilla.
_______________________________________________________________________________________
Работаем с Псевдоэлементами

Использование псевдоэлементов ::before и ::after позволяет нам добавлять широкое
 разнообразие содержимого на страницу.

В примере ниже, псевдоэлемент ::before используется
 для добавления изображения до списка.

HTML: 

<p>You can insert text, images, and other resources using <strong>:before </strong>pseudo element.</p>
<p>You can insert text, images, and other resources using <strong>:before </strong>pseudo element.</p>
<p>You can insert text, images, and other resources using <strong>:before </strong>pseudo element.</p>

CSS:

p::before{
content: url("C:/Users/Last_Beaver/Pictures/22137508.png");
}

before(до) - вставляет что либо до нашего элемента
after(после) -  вставляет что либо после нашего элемента

_______________________________________________________________________________________
Свойство word-wrap

Свойство word-wrap позволяет разбивать длинные слова и переносить их на следующую 
строку. Свойство имеет два значения: normal и break-word. 

CSS: 

p {
   width: 210px; 
   height: 100px;
   border: 1px solid #000000;
   word-wrap: normal;
}

normal - доинные слова просто выходят за границы указанного блока
break-word - длинные слова переносятся если они заходят за границы указанного блока
_______________________________________________________________________________________
Правило @font-face

Правило @font-face позволяет загружать специфичные шрифты на веб-страницу. 
С помощью этого правила дизайнеры больше не лимитированы в установленных
 на пользовательских компьютерах шрифтах. 

В Internet Explorer 8 и более ранних версиях, URL должен указывать 
на файл Embedded(Внедряемый) OpenType (eot), в то время как Firefox, 
Chrome, и др. поддерживают шрифты True Type Fonts (ttf) и OpenType Fonts (otf). 

В правиле @font-face вы должны сначала указать
 имя шрифта (например, myFirstFont), а затем указать ссылку на файл шрифта.



Использование Правила @font-face

Каждая форма семейства шрифтов должна быть объявлена с помощью правила @font-face.
В примере ниже, загружен пользовательский шрифт "Delicious" и используется в заголовке.
CSS:

@font-face {
  font-family: Delicious; 
  src: url('Delicious-Roman.otf'); 
} 
@font-face { 
  font-family: Delicious; 
  font-weight: bold; 
  src: url('Delicious-Bold.otf'); 
}
h1{
   font-family: Delicious, sans-serif; 
}

Браузер Internet Explorer имеет встроенный баг при 
определении множества правил @font-face. Использование 
#iefix исправляет данную проблему, что показано в примере ниже:

@font-face { 
   font-family: Delicious; 
   src: url('Delicious-Roman.ttf');
   src: url('Delicious-Roman.eot?#iefix'); 
}

_______________________________________________________________________________________
