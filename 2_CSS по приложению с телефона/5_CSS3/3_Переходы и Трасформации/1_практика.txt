_______________________________________________________________________________________
Переходы CSS3

Переходы CSS3 позволяют нам изменять одно значение свойства на другое в течениe заданной продолжительности. 
transition-property - указывает свойство, к которому будет применен переход
transition-duration - определяет продолжительность, в течение которой произойдет переход
transition-timing-function - определяет, как будет изменяться темп перехода во время его продолжительности
transition-delay - определяет задержку (в секундах) для эффекта перехода

В примере ниже, мы установили свойство перехода на transform, с продолжительностью равной 5 секундам, с функцией ease-in которая устанавливает эффект перехода с медленным стартом. 

transition: transform 5s ease-in;

Эффект перехода может быть применен к широкому множеству свойств CSS, включая background-color, width, height, opacity, и многие другие.
_______________________________________________________________________________________
Свойство Transition

В примере ниже, элемент div имеет ширину и высоту равную 50px, с зеленым фоном. Мы определили эффект перехода для свойства width, с продолжительностью в 3 секунды:

CSS выглядит следующим образом: 

div {
   width: 50px;
   height: 50px;
   background: #32CD32;
   transition: width 3s;
}
div:hover {
   width: 250px;
}

Когда курсор выходит за пределы элемента, то он постепенно вернется к своему первоначальному размеру.
_______________________________________________________________________________________
transition-timing-function

Свойство transition-timing-function определяет насколько быстро должно изменяться значение стилевого свойства, для которого применяется эффект перехода.
Может принимать следующие значение:
ease - анимация начинается медленно, затем быстро ускоряется.
ease-in - начинается медленно, затем ускоряется и останавливается резко.
ease-out - начинается быстро, но замедляется до остановки.
ease-in-out - похоже на ease, но с более тонким ускорением и замедлением.
linear - постоянная скорость прохождения анимации; часто применяется для изменений цвета и прозрачности.

Наконец, у нас есть cubic-bezier(), что позволяет нам определять ваши собственные значения в функции cubic-bezier. Возможными значениями являются числа от 0 до 1.

transition-timing-function: cubic-bezier(0,0,1,1);

Если не определена функция, то значением по умолчанию является ease.
_______________________________________________________________________________________
CSS3 Трансформация

Трансформация в CSS3 позволяет вам транслировать, вращать, масштабировать и искажать элементы.
Трансформация это эффект, который позволяет вам изменять размер, форму и положение элемента на веб-странице.
CSS3 поддерживает 2D и 3D трансформации. Давайте взглянем на вращающуюся трансформацию: 


Теперь, давайте применим вращение к элементу div на 10deg:

div {
   width: 200px;
   height: 100px;
   margin-top: 30px;
   background-color: #32CD32;
   transform: rotate(10deg);
}

Метод rotate() вращает элемент по, или против часовой стрелки, в соответствии с заданным градусом.Отрицательные значения приведут к вращению против часовой стрелки.
_______________________________________________________________________________________
Использование Отрицательных Значений

Как было сказано ранее, использование положительных значений будет вращать элемент по часовой стрелке, а использование отрицательных значений будет вращать элемент против часовой стрелки. 

div.positive {
   width: 200px;
   height: 100px;
   margin-top: 30px;
   background-color: #32CD32;
   transform: rotate(10deg);
}
div.negative {
   width: 200px;
   height: 100px;
   margin-top: 30px;
   background-color: #32CD32;
   transform: rotate(-10deg);
}
_______________________________________________________________________________________
transform-origin

Свойство transform-origin позволяет вам изменять позицию трансформируемого элемента. Значением по умолчанию является 50% 50%, что соответствует центру элемента.
В примере ниже, мы использовали свойство transform-origin вместе с transform-rotate. Начало оси-x (горизонтали) установлено на 25% от левого края. Начало оси-y (вертикали) установлено на 75% от верхнего края.

CSS:

div.empty-div {
   position: relative;
   height: 100px;
   width: 100px;
   margin: 30px;
   padding: 10px;
   border: 1px solid black;
}
div.green-div {
   padding: 50px;
   position: absolute;
   background-color: #8bc34a;
   border: 1px solid white;
   transform: rotate(15deg);
   transform-origin: 25% 75%;
}

0 0 является таким же значением, как и top left, а 100% 100% это то же самое, что и bottom right.
Свойство transform-origin должно использоваться вместе со свойством transform.
_______________________________________________________________________________________
Метод translate()

Метод translate() двигает элемент с его текущей позиции (в соответствии с заданными параметрами по оси x и оси y). Положительные значения сдвигают элемент вниз и вправо от его положения по умолчанию, в то время как отрицательные значения сдвигают элемент вверх и влево от положения по умолчанию.

В примере ниже, элемент div сдвигается на 100px вправо и 50px вниз: 

div {
   padding: 50px;
   position: absolute;
   background-color: #32CD32;
   transform:translate(100px, 50px);
}

Элемент может быть также сдвинут с помощью установки полей, или позиционирования элемента, хотя сдвиг является лучшим выбором для анимации элементов.
_______________________________________________________________________________________
Метод skew()

Метод skew() наклоняет элемент вдоль оси-x и оси-y на заданный угол.

Следующий пример наклоняет элемент <div> на 30 градусов вдоль оси-x: 

transform: skew(30deg);

Если второй параметр не определен, то он будет иметь значение равное нулю.
_______________________________________________________________________________________
Метод scale()

Метод scale() увеличивает или уменьшает размер элемента, в соответствии с заданными параметрами ширины и высоты. 1 соответствует оригинальному размеру, 2 соответствует удвоенному оригинальному размеру и так далее. 

В примере ниже, мы уменьшили первый элемент div умножив на коэффициент 0.7 по горизонтали и вертикали, и увеличили второй элемент div умножив на коэффициент 1.5 по горизонтали и вертикали. 

div.first {
   width: 200px;
   height: 100px;
   background-color: #8BC34A;
   transform: scale(0.7, 0.7);
   color:white;
}
div.second {
   margin: 60px;
   width: 200px;
   height: 100px;
   background-color: #8bc34a;
   transform: scale(1.5,1.5);
   color:white;
}

Если был передан только один параметр методу scale(), то он применит этот коэффициент и к высоте и к ширине.
_______________________________________________________________________________________
Множество Трансформаций

Несколько трансформаций могут быть выполнены одновременно. Вращение и масштабирование элемента одновременно является примером этому.
Применить множество трасформаций к одному элементу очень просто; просто разделите их с помощью пробелов.

Пример использования двух трансформаций:

transform: rotate(45deg) translate(100px);

Если вы используете запятые для разделения функций, то ни одна из функций не будет применена, так что не забывайте, что использовать запятые нельзя.
_______________________________________________________________________________________
Анимация CSS3

Анимация позволяет элементу постепенно измениться с одного стиля к другому.
Вы можете изменять множество CSS свойств столько раз, сколько вы хотите.
Ключевые кадры содержат стили, которые будут иметь элементы в определенное время

Правило @keyframes

При определении стилей CSS внутри правила @keyframes, анимация постепенно изменится от текущего стиля к новому стилю в определенное время.
Чтобы получить работающую анимацию, вам необходимо связать анимацию с элементом.

Следующий пример изменит фоновый цвет элемента три раза: когда анимация выполнена на 50%, на 70%, и когда анимация будет выполнена на 100%.

CSS:

@keyframes example {
   0%  {background-color: red;}
   50%  {background-color: yellow;}
   70%  {background-color: blue;}
   100% {background-color: green;}
}
_______________________________________________________________________________________
Правило @keyframes

В качестве альтернативы использования процентов, вы можете использовать ключевые слова from и to , где:
from это значение начинающееся с 0%
to это значение заканчивающееся на 100%.

Два примера ниже являются эквивалентными, и выводят один и тот же результат: 

@keyframes colorchange {
   0% {background-color: red;}
   100% {background-color: green;}
}

@keyframes colorchange {
   from {background-color: red;}
   to {background-color: green;}
}

colorchange это название анимации.
_______________________________________________________________________________________
Правило @keyframes

Чтобы анимация работала, вам необходимо связать анимацию с элементом.
В примере ниже, анимация длится одну секунду и изменяет красный фоновый цвет элемента div на зеленый и голубой. 

div {
   width: 100px;
   height: 100px;
   background-color: red;
   animation-name: colorchange;
   animation-duration: 1s;
}
@keyframes colorchange {
   0% {background-color: red;}
   50% {background-color: green;}
   100% {background-color: blue;}
} 

Свойство animation-name определяет используемую для элемента анимацию.
Свойство animation-duration определяет длительность выбранной анимации. 

Если свойство animation-duration не было определено, то анимация не будет воспроизведена, потому что значением по умолчанию длительности является 0.
_______________________________________________________________________________________
Свойство animation-name

Свойство animation-name определяет какую анимацию использовать. 
В этом примере имя анимации установлено на colorchange, что соответствует определенным ключевым кадрам.

CSS:

div {
   animation-name: colorchange;  
   animation-duration: 5s;
}
@keyframes colorchange {
   from { width: 0px; }
   to { width: 100px; }
}

Если имя анимации не соответствует ни одному правилу ключевых кадров, то анимация не будет воспроизведена.
_______________________________________________________________________________________
Свойства Анимации

animation-timing-function определяет кривую скорости анимации. Может иметь следующие значения:
ease - анимация начинается медленно, затем быстро, затем медленно заканчивается (по умолчанию)
linear - анимация с одинаковой скоростью от начала и до конца
ease-in - анимация с медленным началом
ease-out - анимация с медленным концом
ease-in-out - анимация с медленным началом и концом
cubic-bezier(n,n,n,n) - позволяет вам определять собственные значения в функции cubic-bezier

CSS синтаксис выглядит следующим образом:

animation-timing-function: linear;




animation-delay - определяет задержку до начала анимации. CSS синтаксис выглядит следующим образом:

animation-delay: 2s;

Значения animation-delay и animation-duration могут быть определены в секундах (s) или миллисекундах (ms).
_______________________________________________________________________________________
Еще Больше Свойств Анимации

Свойство animation-iteration-count определяет количество повторов анимации. 
Например, вы можете установить, чтобы анимация выполнилась 5 раз:

animation-iteration-count: 5;

Чтобы анимация повторялась бесконечно, просто используйте значение infinite: 

animation-iteration-count: infinite;

animation-direction указывает, как ключевой кадр должен быть применен.
Значениями могут быть:
normal - значение по умолчанию, что значит, что оно выполняется от 0 % до 100%. 
reverse - анимация выполняется в обратном направлении от 100 % до 0%
alternate - анимация выполняется вперед, затем обратно, затем снова вперед.
alternate reverse - анимация сначала выполняется в обратном направлении, затем вперед, затем снова в обратном направлении.

Если вы используете 0 или отрицательное число для animation-iteration-count, то анимация никогда не начнется.
_______________________________________________________________________________________
Свойство animation

Обратите внимание на следующий пример:

div {
   animation-name: colorchange;
   animation-duration: 3s;
   animation-timing-function: ease-in;
   animation-delay: 1s;
   animation-iteration-count: infinite;
   animation-direction: reverse;
}

Одно свойство animation может быть использовано для достижения такого же результата, как в вышеуказанном коде:

div { 
   animation: colorchange 3s ease-in 1s infinite reverse;
}
_______________________________________________________________________________________
3D Трансформация

Вместе с осями x и y, 3D Трансформация представляет ось-Z, которая позволяет 3D манипуляции.
3D Трансформация похожа на 2D Трансформацию:
rotateX(), rotateY() и rotateZ() вращают элемент в 3-х мерном пространстве вокруг соответствующих осей и с заданным градусом.

CSS: 

div.X {
   transform: rotateX(150deg);
}
div.Y {
   transform: rotateY(150deg);
}
div.Z {
   transform: rotateZ(150deg);
}

Вы можете выключить все трансформации, примененные к элементу, используя функцию none: transform: none;
_______________________________________________________________________________________
Сдвиг

Методы 3D сдвига позволяют вам передвигать элементы горизонтально (translateX), вертикально (translateY) и к или от экрана (translateZ), используя любые единицы длины (px, em, %, и т.д.). Положительные значения сдвигают элемент к зрителю, а отрицательные – от него.

CSS: 

#mybox1 {
   transform: translateX(29px) 
     translateY(5em) 
     translateZ(-13px);
}

Метод translate3d() позволяет вам передавать значения x, y, и z, все за один раз, следующим образом: 

#mybox1 {
   transform: translate3d(-20px, 4em, 10px);
}

Также, как и в методе translate3d(), существуют также scale3d() и rotate3d(), которые применяются для масштабирования и вращения элементов в 3D.

Сдвиг элемента похож на косвенное позиционирование - он не влияет на поток документа. Сдвинутый элемент оставит свое положение в потоке и появится только для перемещения.
_______________________________________________________________________________________
Перспектива

Перспектива определяет глубину воспроизведения 3D сцены. Представляйте себе перспективу, как расстояние от зрителя до объекта. Чем больше значение, тем больше расстояние и меньше интенсивность визуального эффекта. 
При определении свойства perspective для элемента, перспективный вид получают именно дочерние элементы, а не сам элемент.

CSS:

div.empty-div {
   perspective: 100px;
}
div.green-div {
   transform: rotateX(45deg);
}

Свойство perspective влияет только на трансформированные 3D элементы.
_______________________________________________________________________________________

