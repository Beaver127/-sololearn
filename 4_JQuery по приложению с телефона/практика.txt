
/* JQUERY */

//меняем содержимое блока с id="title"
// $("#title").html("Last Beaver");

// Вы можете скачать библиотеку jQuery с www.jquery.com, или,
//  в качестве альтернативы, вы можете включить ее с 
//  CDN (Content Delivery Network), как Google или Microsoft.
// Мы будем использовать CDN с официального сайта jQuery.
// Чтобы начать использование jQuery, нам сначала необходимо 
// добавить ее в заголовок нашего
// HTML документа с помощью тега 
// скрипта(подключение jquery):
// HTML:

// <!DOCTYPE html>
// <html>
//     <head>
//         <title>Page Title</title>
//         <script src="https://code.jquery.com/jquery-3.1.1.js"></script>
//     </head>
//     <body>
//     </body>
// </html>

//READY
// Хорошей практикой является ожидание полной загрузки HTML 
// документа, до работы с ним. 
// Для этого мы используем событие ready объекта document: 

// 1
// $(document).ready(function() {
//    //...
// });

// 2
//сокращённая форма записи кода выше
// $(function() {
//    //...
// });

//смена содержимого блока с id="#start"
// $(function() {
//   $("#title").html("Go!");
// });


// Синтаксис
// jQuery используется для выбора (запроса) HTML элементов и 
// выполнения "действий" над ними.
// Базовый синтаксис: $("selector").action()
// - С помощью знака $ получается доступ к jQuery.
// - (selector) находит HTML элементы.
// - Затем выполняется действие action() над элементом(-ами).

// $("p").hide()  // hides all <p> elements
// $(".demo").hide()  // hides all elements with class="demo"
// $("#demo").hide()  // hides the element with id="demo"

// //скрыть
// $("#title").hide();
// //показать
// $("#title").show();

// Селекторы
// $("div")  // selects all <div> elements
// $("#test") // select the element with the id="test"
// $(".menu") //selects all elements with class="menu"

// $("div.menu")  // all <div> elements with class="menu"
// $("p:first")  // the first <p> element
// $("h1, p") // all <h1> and all <p> elements
// $("div p") // all <p> elements that are descendants of a <div> element
// $("*")  // all elements of the DOM


// GET AND SET ATTRIBUTES FOR TAG
// АТРИБУТЫ
// Мы можем легко управлять присвоенными к HTML элементам 
// атрибутами, с помощью jQuery.
// href, src, id, class, style являются всеми 
// примерами HTML атрибутов.
// Метод attr() используется для получения значения атрибута.

// html:
// <a href="www.sololearn.com">
//    Click here
// </a> 

// js:
// $(function() {
//   var val = $("a").attr("href");
//   // alerts "www.sololearn.com"
//   alert(val);
// });


// Метод attr() также позволяет нам установить значение для 
// атрибута, указав его в качестве второго параметра. 
// $(function() {
//   $("a").attr("href", "http://www.jquery.com");
// });
// смена атрибута img
// $("img").attr("img", "1.jpg");

// REMOVE ATTRIBUTES
// $("table").removeAttr("border");
// $("table").removeAttr("class"); 

// WORK FOR CONTENT 

// HTML: 
// <p>
//   JQuery is <b>fun</b>
// </p>

// js:
// $(function() {
//   var val = $("p").html();
//   alert(val);
// });
// // alerts "JQuery is <b>fun</b>"

// Обратите внимание, что HTML метки (теги <b>) также возвращаются,
// Если вам нужно только текстовое содержимое, без HTML меток, то вы 
// можете использовать метод text(): 

// $(function() {
//   var val = $("p").text();
//   alert(val);
// });
// // alerts "JQuery is fun"

// Методы html() и text() могут быть использованы для всех HTML
 // элементов, которые могут содержать контент.

// SET CONTENT(Установка контента)
// HTML:
// <div id="test">
//    <p>some text</p>
// </div>

// JS: 
// $(function() {
//   $("#test").text("hello!");
// });
// Если устанавливаемый вами контент содержит HTML метки, то вам 
// необходимо использовать метод html() вместо text().

//содержимое заполняемых полей val()
// Другим полезным методом является метод val(), который позволяет нам получать и
// устанавливать значения полей форм, таких как текстовых полей, выпадающих списков, и других подобных форм. 
// Например:
// HTML: 
// <input type="text" id="name" value="Your Name">

// js:
// $(function() {
//   alert($("#name").val());
// });
// //alerts "Your Name"

// Вывод
// Следующие jQuery методы доступны для получения и установки контента и атрибутов выбранных HTML элементов:
// text() устанавливает или возвращает текстовое содержимое выбранных элементов.
// html() устанавливает или возвращает содержимое выбранных элементов (включая HTML метки).
// val() устанавливает или возвращает значение полей формы.
// attr() устанавливает или возвращает значение атрибутов.
// removeAttr() удаляет указанные атрибуты.


// Добавление Контента
// jQuery имеет методы, которые используются для добавления нового содержимого к выбранному элементу без удаления существующего контента: 
// append() добавляет контент в конец выбранных элементов.
// prepend() добавляет контент в начало выбранных элементов.
// after() добавляет контент после выбранных элементов.
// before() добавляет контент до выбранных элементов.

// Добавление Новых Элементов

// Методы append(), prepend(), before() и after() могут быть также использованы для добавления новых элементов.
// Самым простым способом создания нового HTML элемента с помощью jQuery является следующий: 

// var txt = $("<p></p>").text("Hi"); 
// Вышеуказанный код создает новый элемент <p>, который содержит текст Hi и 
//присваивает его к переменной txt.
// Вы также можете указать несколько элементов в качестве
// аргументов методов before(), after(), append(), prepend(), разделяя их запятыми: $("#demo").append(var1, var2, var3).

// Работа с CSS
// добавление класса
// $("div").addClass("header");
// Для указания нескольких классов внутри метода addClass(), 
//просто разделите их с помощью пробелов. Например, $("div").addClass("class1 class2 class3").

// удаление классов
// $("div").removeClass("red");

// toggleClass()
// Метод toggleClass() переключается между классами добавления/удаления из выбранных элементов, 
//что значит, что если для элемента существует определенный класс, то он будет удален, а если такого класса нет, то он будет добавлен.
// Чтоб продемонстрировать это в действии, мы обработаем событие нажатия кнопки для переключения класса.
// Мы узнаем больше о событиях и их синтаксисе в последующих модулях.

// html:
// <p>Some text</p>
// <button>Toggle Class</button>

// CSS: 
// .red { 
//   color:red; 
//   font-weight: bold;
// }

// JS: 
// $(function() {
//   $("button").click(function() {
//     $("p").toggleClass("red");
//   });
// });
// Вышеуказанный код переключает имя класса "red" при нажатии на кнопку.

// CSS Свойства
// Таким же образом, как и метод html(), метод css() может быть использован для получения и установки значений CSS свойств.
// Например:
// HTML:
// <p>Some text</p>
// CSS: 
// p {
//   background-color:red;
//   color: white;
// }
// JS:
// $(function() {
//   alert($("p").css("background-color"));
//   $("p").css("background-color", "blue");
// }); 

// Множество Свойств
// Для установки нескольких CSS свойств, метод css() использует JSON синтаксис: 
// $("p").css({"color": "red", "font-size": "200%"});


// Размерность
// Методы width() и height() могут быть использованы для установки и получения ширины и высоты HTML элементов.
// Давайте установим ширину и высоту элемента div равными 100px, а также установим фоновый цвет:

// $("div").css("background-color", "red");
// $("div").width(100);
// $("div").height(100);

// Размерность
// Методы width() и height() получают и устанавливают размеры без полей, рамок и отступов.
// Методы innerWidth() и innerHeight() также включают в себя поля.
// Методы outerWidth() и outerHeight() включают поля и рамки.
// Обратите внимание на следующее изображение, чтобы понять, как они работают:

// HTML:
// <div></div>

// CSS: 
// div {
//   width: 300px;
//   height: 100px;
//   padding: 10px;
//   margin: 20px;
//   border: 3px solid blue;
//   background-color: red;
//   color: white;
// }

// JS: 
// $(function() {
//   var txt = "";
//   txt += "width: " + $("div").width() + " ";
//   txt += "height: " + $("div").height() + "<br/>";
//   txt += "innerWidth: " + $("div").innerWidth() + "  ";
//   txt += "innerHeight: " + $("div").innerHeight() + "<br/>";
//   txt += "outerWidth: " + $("div").outerWidth() + "  ";
//   txt += "outerHeight: " + $("div").outerHeight();
    
//   $("div").html(txt);
// });

// DOM

// Перемещение по дереву DOM
// jQuery имеет множество полезных методов для перемещения по дереву DOM
// Метод parent() возвращает прямого родителя выбранного элемента. 
// Например:
// HTML: 

// <div> div element
//   <p>paragraph</p> 
// </div>

// JS: 
// var e = $("p").parent();
// e.css("border", "2px solid red
// В вышеуказанном коде выбирается родительский элемент параграфа и для него устанавливается красная рамка.

//все паренты элемента
// $(function() {
//   var e = $("p").parents();
//   e.css("border", "2px solid red");
// });

// Удаление Элементов
//удаляет каждый второй параграф
// $("p").eq(1).remove();
// Вы также можете использовать метод remove() для нескольких выбранных элементов, например  $("p").remove() удаляет все параграфы.

// Удаление Контента
// Метод empty() используется для удаления потомков выбранного элемента(ов). Например:
// HTML:
// <div>
//    <p style="color:red">Red</p>
//    <p style="color:green">Green</p>
//    <p style="color:blue">Blue</p>
// </div>
// CSS:
// div {
//   background-color: aqua;
//   width: 300px;
//   height: 200px;
// }
// JS:
// $("div").empty();


// Обработка Событий

// JS:
// var x = document.getElementById("title");
// x.onclick = function () {
//   x.innerHTML = Date();
// }

// JQuery:
// $("#title").click(
// 	function() {
// 	$("#title").text(new Date());
// });

// События Мыши:
// click возникает при нажатии на элемент.
// dblclick возникает при двойном нажатии на элемент.
// mouseenter возникает, когда указатель мыши находится(появляется) над выбранным элементом.
// mouseleave возникает, когда указатель покидает выбранный элемент.
// mouseover возникает, когда указатель мыши находится над выбранным элементом.

// События Клавиатуры: 
// keydown возникает при нажатии на клавишу клавиатуры.
// keyup возникает при отпускании клавиши клавиатуры.

// События Форм:
// submit возникает при подтверждении формы.
// change возникает при изменении значения элемента.
// focus возникает при появлении фокуса на элементе.
// blur возникает при снятии фокуса с элемента.

// События Документа: 
// ready возникает при полной загрузке модели DOM.
// resize возникает при изменении размера окна браузера.
// scroll возникает, когда пользователь прокручивает мышью в определенном элементе.

//приравниваем значение из поля ввода
//в блок при нажатии клавиш
// $("#text").keydown(function() {
// $("#block").text($("#text").val());
// });


// Другим способом обработки событий в jQuery является использование метода on(). 
// Метод on() используется для прикрепления событий к выбранному элементу. Например:

// $( "p" ).on( "click", function() {
//   alert("clicked");
// });

// Метод on() полезен при связывании одного обработчика событий с множеством событий. 
//Вы можете предоставить множество имен событий, разделив их пробелами в первом аргументе. 
//Например, вы можете использовать один обработчик для событий click и dblclick.

// off()
// Вы можете убрать обработчики событий, используя метод off().
// Например:

// $("div").on("click", function() { 
//   alert('Hi there!'); 
// }); 
// $("div").off("click");

// Объект События
// Каждый обработчик события может принять объект события, который содержит свойства и методы, связанные с событием:
// pageX, pageY положение мыши (X и Y координаты) во время возникновения события, относительно верхнего левого угла страницы.
// type тип события (например "click").
// which кнопка или клавиша, которая была нажата.
// data любые данные, которые были переданы, при выполнении события.
// target элемент DOM, который инициировал событие.
// preventDefault() отменяет действие по умолчанию события (например, следование по ссылке).
// stopPropagation() прекращает дальнейшую передачу текущего события.


// $( "#title a" ).click(function(event) {
//   alert("X: " + event.pageX + "\n" + "Y: " + event.pageY);
//   event.preventDefault();
// });
// Вышеуказанный код выводит положение мыши при нажатии и защищает от следования по ссылке.


// Вызов Событий
// Мы также можем вызывать события программно, используя метод trigger(). Например, 
//вы можете инициировать событие click без нажатия пользователем на элемент: 

// $("div").click(function() {
//    alert("Clicked!");
// });
// $("div").trigger("click");
// Наш код вызывает событие click для выбранного элемента.

// To-Do List

// Давайте создадим проект To-Do list используя изученные концепции. В список дел можно будет 
//добавлять новые дела, а также удалять существующие.

// Сперва, мы создадим HTML:  
// <h1>My To-Do List</h1>
// <input type="text" placeholder="New item" />
// <button id="add">Add</button>
// <ol id="mylist"></ol>

// $(function() {
// 	//добавление элемента
//   $("#add").on("click", function() {
// var val = $("input").val();
// if(val !== '') {
//   var elem = $("<li></li>").text(val);
//   $(elem).append("<button class='rem'>X</button>");
//   $("#mylist").append(elem);
//   $("input").val(""); //clear the input
// }
// //удаление элемента
// $(".rem").on("click", function() {
//   $(this).parent().remove();
// });
//   });
// });

//АНИМАЦИЯ

// Hide/Show
// jQuery имеет несколько простых для применения эффектов для создания анимаций.
// Методы hide() и show() используются для скрытия и отображения выбранных элементов.
// Метод toggle() используется для переключения между скрытием и отображением элементов.
// Например:
// $(function() {
//   $("p").click(function() {
//     $("div").toggle();
//   });
// });

// Методы hide/show/toggle могут принимать опциональный аргумент скорость, который определяет скорость анимации в миллисекундах.
// Например, давайте передадим 1000 миллисекунд в качестве аргумента методу toggle():
// $(function() {
//   $("p").click(function() {
//     $("div").toggle(1000);
//   });
// });
// Методы hide/show/toggle могут также принимать второй опциональный параметр callback, 
//который является выполняемой после завершения анимации функцией.



// Fade In/Out
// Похожие на методы hide/show, jQuery предоставляет методы fadeIn/fadeOut, с помощью которых элементы постепенно исчезают/появляются. 
// Также, как и метод toggle() переключается между скрытием и отображением, метод fadeToggle() переключает исчезновение и появление.
// Давайте взглянем на fadeToggle() в действии:

// $(function() {
//   $("p").click(function() {
//     $("div").fadeToggle(1000);
//   });
// });

// Так же, как и toggle(), fadeToggle() принимает два опциональных параметра: speed и callback.
// Другим используемым методом является fadeTo(), который позволяет установить исчезновение на 
//заданную величину прозрачности (значение между 0 и 1). Например: $("div").fadeTo(1500, 0.7);

// Скольжение Вверх/Вниз
// Методы slideUp() и slideDown() используются для создания элементам эффекта скольжения.
// И снова, также как и предыдущие методы переключения, метод slideToggle() переключается между 
//эффектами скольжения и может принимать два опциональных параметра: speed и callback.
// Например:

// $(function() {
//   $("p").click(function() {
//     $("div").slideToggle(500);
//   });
// });

//Выпадающее меню
// Давайте создадим простое выпадающее меню, которое будет открываться при нажатии на элемент menu.
// HTML:
// <div class="menu">
//   <div id="item">Drop-Down</div>
//   <div id="submenu">
//     <a href="#">Link 1</a>
//     <a href="#">Link 2</a>
//     <a href="#">Link 3</a>
//   </div>
// </div>

// CSS:

//кнопка для вспл меню
// #item {
//     background-color: #4CAF50;
//     color: white;
//     padding: 16px;
//     font-size: 16px;
//     border: none;
//     cursor: pointer;
// }
// #item:hover, #item:focus {
//     background-color: #3e8e41;
// }
// .menu {
//     position: relative;
//     display: inline-block;
// }

//под меню с ссылками
//поумалчанию скрыто
// #submenu {
//     display: none;
//     position: absolute;
//     background-color: #3e8e41;
//     min-width: 160px;
//     box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
// }
// #submenu a {
//     color: white;
//     padding: 12px 16px;
//     text-decoration: none;
//     display: block;
// }
// #submenu a:hover {
//     background-color: #4CAF50
// }

// //при нажатии кнопки
// $("#item").click(function() {
// 	//сворачиваем или разворачиваем меню
//   $("#submenu").slideToggle(500);
// }); 


//animate() Анимация
// animate()
// Метод animate() позволяет вам установить анимацию к набору значения, или к значению, относительно текущего значения.
// Вам необходимо определить анимируемые CSS свойства в качестве параметров в формате JSON (пары "ключ":"значение").
// Второй параметр определяет скорость анимации.
// Например, следующий параметр анимирует свойство width элемента div за 1 секунду до значения 250px:


// $("div").click(function() {
//   $("div").animate({width: '250px'}, 1000);
// });
// Обратите внимание на формат JSON для предоставления параметров CSS. Синтаксис JSON был 
//также использован в предыдущих модулях при работе с CSS свойствами.

// Вы можете анимировать любое свойство CSS используя вышеупомянутый синтаксис,
// но есть одна важная для запоминания вещь: все имена свойств должны иметь camelCase (верблюжий регистр) 
//при использовании с методом animate() (camelCase является практикой написания слитных слов или фраз, в 
//котором каждое слово, или аббревиатура начинается с большой буквы, а первое слово пишется в нижнем регистре).
// Вам необходимо будет написать paddingLeft вместо padding-left, marginRight вместо margin-right, и так далее.

// Множество свойств может быть анимировано в одно время, с помощью разделения запятыми.
// $("div").animate({
//   width: '250px',
//   height: '250px'
// }, 1000);

// Также можно определить относительные значения (значение относительно текущего значения элемента). 
//Это выполняется с помощью размещения += или -= перед значением:

// $("div").animate({
//   width: '+=250px',
//   height: '+=250px'
// }, 1000);

//ОСТАНОВКА АНИМАЦИИ
// Для остановки анимации до ее завершения, jQuery предоставляет метод stop().


// Очередь Анимации 
// По умолчанию, jQuery поставляется с функцией очереди для анимации.
// Это значит, что если вы напишете несколько вызовов animate() один за другим, jQuery создаст "внутреннюю" 
//очередь для этих вызовов метода. Затем запускаются вызовы анимации один за другим.
// Например:

// var div = $("div");
// div.animate({opacity: 1});
// div.animate({height: '+=100px', width: '+=100px', top: '+=100px'}, 500);
// div.animate({height: '-=100px', width: '-=100px', left: '+=100px'}, 500);
// div.animate({height: '+=100px', width: '+=100px', top: '-=100px'}, 500);
// div.animate({height: '-=100px', width: '-=100px', left: '-=100px'}, 500);
// div.animate({opacity: 0.5});

// Каждый вызов метода animate() будет запущен друг за другом.

// Запомните, чтобы управлять положением элементов, вам необходимо установить элементу CSS свойство position
// со значением relative, fixed, или absolute.

// Метод animate(), также как и методы hide/show/fade/slide, может принимать в качестве параметра опциональную
// функцию callback, которая выполняется после окончания текущего эффекта.